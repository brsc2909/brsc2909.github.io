---
title: Creating Trusted Local SSL Certificates for Development
date: '2022-03-20'
description: "A comprehensive guide to setting up trusted SSL certificates for local development environments"
author: Brendan Scullion
keywords: "ssl, nginx, local, development, browser, cert, authority, invalid, warning, websockets, api, facebook, login, browser, trusted, authorities, custom, config, bash, script, github, makecrt"
published: true
---

<script>
  function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
      alert('Command copied to clipboard!');
    }).catch(err => {
      console.error('Failed to copy: ', err);
    });
  }
</script>

When developing modern web applications, running your local environment over HTTPS is often necessary. Whether you're integrating third-party APIs, implementing OAuth flows, or testing websocket connections, having proper SSL certificates is crucial. However, dealing with untrusted certificates and constant browser warnings can be frustrating and time-consuming.

This guide will show you how to create and manage trusted SSL certificates for your local development environment, eliminating those annoying browser warnings once and for all.

**Prerequisites**: This guide assumes you have NGINX and local DNS configured correctly. If not, please refer to our previous guide to get started.

### The Problem

Common SSL-related challenges in local development include:
- Browser warnings about untrusted certificates (`NET::ERR_CERT_AUTHORITY_INVALID`)
- Issues connecting to local backend services due to certificate trust
- Websocket connection problems
- Time wasted recreating certificates for different projects
- The constant "Not Secure" warning in your browser's address bar

### The Solution

We'll solve these issues by:

1. Creating a local certificate authority (CA)
2. Creating SSL certificates for each project and signing them with this CA
3. Adding the CA to your browser's trusted authorities
4. Creating additional certificates signed by the same CA for future projects

### Quick Setup Using makecrt

I've created a convenient bash script to automate this process. You can get it from [Github](https://github.com/brsc2909/makecrt) or download it directly:

```bash
curl --location -O https://raw.githubusercontent.com/brsc2909/makecrt/main/makecrt && chmod +x makecrt
```

<button on:click={() => copyToClipboard()} class="copy-btn">
  Copy
</button>




### Using makecrt

The usage is straightforward - run the script as root and specify your domains as arguments. Create separate certificates for each project:

```bash
sudo ./makecrt --domains local-app.example.com local-api.example.com
```

Example output:
```plaintext
Creating extfile
Creating certificate for local-app.example.com
Signature ok
subject=C = IE, ST = Leinster, L = DUBLIN, O = Local CA beast, OU = IT, CN = local-app.example.com
Getting CA Private Key

NGINX config:
ssl_certificate_key  /etc/ssl/private/local-app.example.com.key;
ssl_certificate  /etc/ssl/certs/local-app.example.com.crt;
```

### Adding the CA to Your Browser

Follow these steps to add the CA certificate to Chrome or other Chromium-based browsers (you only need to do this once):

1. Open Chrome Settings and search for "certificates"
2. Navigate to Security â†’ Manage Certificates
3. Go to the "Authorities" tab
4. Click "Import" and select your CA certificate (default location: `/etc/ssl/certs/myLocalRootCA.crt`)
5. Enable "Trust this certificate for identifying websites"
6. Verify your domain appears in the trusted authorities list

Once completed, you'll see a proper secure connection indicator instead of security warnings.

### Advanced Configuration

The script can be customized in two ways:

1. **Command-line Options**
```bash
Usage: ./makecrt -d [domain1, domain2...] [options]

options:
-h, --help           show brief help
-d, --domains        specify domains for certificate use
    --days          specify certificate validity period (default: 3650)
    --CA            specify local CA path (default: /etc/ssl/certs/myLocalRootCA.crt)
    --CAkey         specify local CA private key path
-pd, --private-dir   specify private key directory
-cd, --cert-dir      specify certificate directory
-e, --eliptic-curve  specify elliptic curve type (default: prime256v1)
```

2. **Modifying Default Values**
Edit these variables in the script to match your environment:

```bash
# Default configuration
DAYS=3650
CERT_DIR=/etc/ssl/certs
PRIVATE_KEY_DIR=/etc/ssl/private
e_curve=prime256v1
localRootCA=$CERT_DIR/myLocalRootCA.crt
localRootCAkey=$PRIVATE_KEY_DIR/myLocalRootCA.key
EXTFILE=/tmp/_v3.ext

# Organization details
ORG="Local CA $(hostname)"
ORG_UNIT="IT"
COUNTY="DUBLIN"
STATE="Leinster"
COUNTRY="IE"
```

With this setup, you'll have a professional-grade local SSL environment that eliminates security warnings and streamlines your development workflow.


<style>
.copy-btn {
  background-color: #000;  /* Changed to black */
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  padding: 0.5rem 1rem;
}

.copy-btn:hover {
  background-color: #333;  /* Dark gray on hover */
}
</style>